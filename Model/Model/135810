format 220
"servlet" // javax.servlet-3.0-sources::javax::servlet
  revision 1
  modified_by 2 "william"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "C:\\Program Files\\Java\\javax.servlet-3.0-sources/javax/servlet/"
  java_package "javax.servlet"
  classview 135298 "servlet"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 137090 "ServletContext"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines a set of methods that a servlet uses to communicate with its
servlet container, for example, to get the MIME type of a file, dispatch
requests, or write to a log file.

<p>There is one context per \"web application\" per Java Virtual Machine.  (A
\"web application\" is a collection of servlets and content installed under a
specific subset of the server's URL namespace such as <code>/catalog</code>
and possibly installed via a <code>.war</code> file.) 

<p>In the case of a web
application marked \"distributed\" in its deployment descriptor, there will
be one context instance for each virtual machine.  In this situation, the 
context cannot be used as a location to share global information (because
the information won't be truly global).  Use an external resource like 
a database instead.

<p>The <code>ServletContext</code> object is contained within 
the {@link ServletConfig} object, which the Web server provides the
servlet when the servlet is initialized.

@author 	Various

@see 	Servlet#getServletConfig
@see 	ServletConfig#getServletContext
"
      classrelation 136706 // TEMPDIR (<unidirectional association>)
	relation 136706 --->
	  a role_name "TEMPDIR" init_value " \"javax.servlet.context.tempdir\"" class_relation const_relation public
	    comment "
The name of the <tt>ServletContext</tt> attribute which stores
the private temporary directory (of type <tt>java.io.File</tt>)
provided by the servlet container for the <tt>ServletContext</tt>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 136706 // TEMPDIR (<unidirectional association>)
	  b parent class_ref 137218 // String
      end

      classrelation 136834 // ORDERED_LIBS (<unidirectional association>)
	relation 136834 --->
	  a role_name "ORDERED_LIBS" init_value "
        \"javax.servlet.context.orderedLibs\"" class_relation const_relation public
	    comment "
The name of the <code>ServletContext</code> attribute whose value
(of type <code>java.util.List&lt;java.lang.String&gt;</code>) contains
the list of names of JAR files in <code>WEB-INF/lib</code> ordered by
their web fragment names (with possible exclusions if
<code>&lt;absolute-ordering&gt;</code> without any
<code>&lt;others/&gt;</code> is being used), or null if no
absolute or relative ordering has been specified

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 136834 // ORDERED_LIBS (<unidirectional association>)
	  b parent class_ref 137218 // String
      end

      operation 143106 "getContextPath"
	public return_type class_ref 137218 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the context path of the web application.

<p>The context path is the portion of the request URI that is used
to select the context of the request. The context path always comes
first in a request URI. The path starts with a <tt>/</tt> character
but does not end with a <tt>/</tt> character. For servlets in the
default (root) context, this method returns \"\".

<p>It is possible that a servlet container may match a context by
more than one context path. In such cases the
{@link javax.servlet.http.HttpServletRequest#getContextPath()}
will return the actual context path used by the request and it may
differ from the path returned by this method.
The context path returned by this method should be considered as the
prime or preferred context path of the application.

@return The context path of the web application, or \"\" for the
default (root) context

@see javax.servlet.http.HttpServletRequest#getContextPath()

@since Servlet 2.5
"
      end

      operation 143234 "getContext"
	public return_type class_ref 137090 // ServletContext
	nparams 1
	  param inout name "uripath" type class_ref 137218 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>ServletContext</code> object that 
corresponds to a specified URL on the server.

<p>This method allows servlets to gain
access to the context for various parts of the server, and as
needed obtain {@link RequestDispatcher} objects from the context.
The given path must be begin with <tt>/</tt>, is interpreted relative 
to the server's document root and is matched against the context
roots of other web applications hosted on this container.

<p>In a security conscious environment, the servlet container may
return <code>null</code> for a given URL.
      
@param uripath 	a <code>String</code> specifying the context path of
			another web application in the container.
@return		the <code>ServletContext</code> object that
			corresponds to the named URL, or null if either
none exists or the container wishes to restrict 
			this access.

@see 		RequestDispatcher
"
      end

      operation 143362 "getMajorVersion"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the major version of the Servlet API that this
servlet container supports. All implementations that comply
with Version 3.0 must have this method return the integer 3.

@return 3
"
      end

      operation 143490 "getMinorVersion"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minor version of the Servlet API that this
servlet container supports. All implementations that comply
with Version 3.0 must have this method return the integer 0.

@return 0
"
      end

      operation 143618 "getEffectiveMajorVersion"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the major version of the Servlet specification that the
application represented by this ServletContext is based on.

<p>The value returned may be different from {@link #getMajorVersion},
which returns the major version of the Servlet specification
supported by the Servlet container.

@return the major version of the Servlet specification that the
application represented by this ServletContext is based on

@throws UnsupportedOperationException if this ServletContext was
passed to the {@link ServletContextListener#contextInitialized} method
of a {@link ServletContextListener} that was neither declared in
<code>web.xml</code> or <code>web-fragment.xml</code>, nor annotated
with {@link javax.servlet.annotation.WebListener}

@since Servlet 3.0
"
      end

      operation 143746 "getEffectiveMinorVersion"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the minor version of the Servlet specification that the
application represented by this ServletContext is based on.

<p>The value returned may be different from {@link #getMinorVersion},
which returns the minor version of the Servlet specification
supported by the Servlet container.

@return the minor version of the Servlet specification that the
application xrepresented by this ServletContext is based on

@throws UnsupportedOperationException if this ServletContext was
passed to the {@link ServletContextListener#contextInitialized} method
of a {@link ServletContextListener} that was neither declared in
<code>web.xml</code> or <code>web-fragment.xml</code>, nor annotated
with {@link javax.servlet.annotation.WebListener}

@since Servlet 3.0
"
      end

      operation 143874 "getMimeType"
	public return_type class_ref 137218 // String
	nparams 1
	  param inout name "file" type class_ref 137218 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the MIME type of the specified file, or <code>null</code> if 
the MIME type is not known. The MIME type is determined
by the configuration of the servlet container, and may be specified
in a web application deployment descriptor. Common MIME
types include <code>text/html</code> and <code>image/gif</code>.

@param file a <code>String</code> specifying the name of a file

@return a <code>String</code> specifying the file's MIME type
"
      end

      operation 144002 "getResourcePaths"
	public return_type class_ref 137346 // Set
	nparams 1
	  param inout name "path" type class_ref 137218 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a directory-like listing of all the paths to resources
within the web application whose longest sub-path matches the
supplied path argument.

<p>Paths indicating subdirectory paths end with a <tt>/</tt>.

<p>The returned paths are all relative to the root of the web
application, or relative to the <tt>/META-INF/resources</tt>
directory of a JAR file inside the web application's
<tt>/WEB-INF/lib</tt> directory, and have a leading <tt>/</tt>.

<p>For example, for a web application containing:

<code><pre>
  /welcome.html
  /catalog/index.html
  /catalog/products.html
  /catalog/offers/books.html
  /catalog/offers/music.html
  /customer/login.jsp
  /WEB-INF/web.xml
  /WEB-INF/classes/com.acme.OrderServlet.class
  /WEB-INF/lib/catalog.jar!/META-INF/resources/catalog/moreOffers/books.html
</pre></code>

<tt>getResourcePaths(\"/\")</tt> would return
<tt>{\"/welcome.html\", \"/catalog/\", \"/customer/\", \"/WEB-INF/\"}</tt>,
and <tt>getResourcePaths(\"/catalog/\")</tt> would return
<tt>{\"/catalog/index.html\", \"/catalog/products.html\",
\"/catalog/offers/\", \"/catalog/moreOffers/\"}</tt>.

@param path the partial path used to match the resources,
which must start with a <tt>/</tt>
@return a Set containing the directory listing, or null if there
are no resources in the web application whose path
begins with the supplied path.

@since Servlet 2.3
"
      end

      operation 144130 "getResource"
	public return_type class_ref 137474 // URL
	nparams 1
	  param inout name "path" type class_ref 137218 // String
	nexceptions 1
	  exception class_ref 137602 // MalformedURLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a URL to the resource that is mapped to the given path.

<p>The path must begin with a <tt>/</tt> and is interpreted
as relative to the current context root,
or relative to the <tt>/META-INF/resources</tt> directory
of a JAR file inside the web application's <tt>/WEB-INF/lib</tt>
directory.
This method will first search the document root of the
web application for the requested resource, before searching
any of the JAR files inside <tt>/WEB-INF/lib</tt>.
The order in which the JAR files inside <tt>/WEB-INF/lib</tt>
are searched is undefined.

<p>This method allows the servlet container to make a resource 
available to servlets from any source. Resources 
can be located on a local or remote
file system, in a database, or in a <code>.war</code> file. 

<p>The servlet container must implement the URL handlers
and <code>URLConnection</code> objects that are necessary
to access the resource.

<p>This method returns <code>null</code>
if no resource is mapped to the pathname.

<p>Some containers may allow writing to the URL returned by
this method using the methods of the URL class.

<p>The resource content is returned directly, so be aware that 
requesting a <code>.jsp</code> page returns the JSP source code.
Use a <code>RequestDispatcher</code> instead to include results of 
an execution.

<p>This method has a different purpose than
<code>java.lang.Class.getResource</code>,
which looks up resources based on a class loader. This
method does not use class loaders.

@param path a <code>String</code> specifying
the path to the resource

@return the resource located at the named path,
or <code>null</code> if there is no resource at that path

@exception MalformedURLException if the pathname is not given in 
the correct form
"
      end

      operation 144258 "getResourceAsStream"
	public return_type class_ref 137730 // InputStream
	nparams 1
	  param inout name "path" type class_ref 137218 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the resource located at the named path as
an <code>InputStream</code> object.

<p>The data in the <code>InputStream</code> can be 
of any type or length. The path must be specified according
to the rules given in <code>getResource</code>.
This method returns <code>null</code> if no resource exists at
the specified path. 

<p>Meta-information such as content length and content type
that is available via <code>getResource</code>
method is lost when using this method.

<p>The servlet container must implement the URL handlers
and <code>URLConnection</code> objects necessary to access
the resource.

<p>This method is different from 
<code>java.lang.Class.getResourceAsStream</code>,
which uses a class loader. This method allows servlet containers 
to make a resource available
to a servlet from any location, without using a class loader.


@param path 	a <code>String</code> specifying the path
			to the resource

@return 		the <code>InputStream</code> returned to the 
			servlet, or <code>null</code> if no resource
			exists at the specified path 
"
      end

      operation 144386 "getRequestDispatcher"
	public return_type class_ref 137858 // RequestDispatcher
	nparams 1
	  param inout name "path" type class_ref 137218 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
Returns a {@link RequestDispatcher} object that acts
as a wrapper for the resource located at the given path.
A <code>RequestDispatcher</code> object can be used to forward 
a request to the resource or to include the resource in a response.
The resource can be dynamic or static.

<p>The pathname must begin with a <tt>/</tt> and is interpreted as
relative to the current context root.  Use <code>getContext</code>
to obtain a <code>RequestDispatcher</code> for resources in foreign
contexts.

<p>This method returns <code>null</code> if the
<code>ServletContext</code> cannot return a
<code>RequestDispatcher</code>.

@param path 	a <code>String</code> specifying the pathname
			to the resource

@return 		a <code>RequestDispatcher</code> object
			that acts as a wrapper for the resource
			at the specified path, or <code>null</code> if 
			the <code>ServletContext</code> cannot return
			a <code>RequestDispatcher</code>

@see 		RequestDispatcher
@see 		ServletContext#getContext
"
      end

      operation 144514 "getNamedDispatcher"
	public return_type class_ref 137858 // RequestDispatcher
	nparams 1
	  param inout name "name" type class_ref 137218 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link RequestDispatcher} object that acts
as a wrapper for the named servlet.

<p>Servlets (and JSP pages also) may be given names via server 
administration or via a web application deployment descriptor.
A servlet instance can determine its name using 
{@link ServletConfig#getServletName}.

<p>This method returns <code>null</code> if the 
<code>ServletContext</code>
cannot return a <code>RequestDispatcher</code> for any reason.

@param name 	a <code>String</code> specifying the name
			of a servlet to wrap

@return 		a <code>RequestDispatcher</code> object
			that acts as a wrapper for the named servlet,
			or <code>null</code> if the <code>ServletContext</code>
			cannot return a <code>RequestDispatcher</code>

@see 		RequestDispatcher
@see 		ServletContext#getContext
@see 		ServletConfig#getServletName
"
      end

      operation 144642 "getServlet"
	public return_type class_ref 137986 // Servlet
	nparams 1
	  param inout name "name" type class_ref 137218 // String
	nexceptions 1
	  exception class_ref 138114 // ServletException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@deprecated	As of Java Servlet API 2.1, with no direct replacement.

<p>This method was originally defined to retrieve a servlet
from a <code>ServletContext</code>. In this version, this method 
always returns <code>null</code> and remains only to preserve 
binary compatibility. This method will be permanently removed 
in a future version of the Java Servlet API.

<p>In lieu of this method, servlets can share information using the 
<code>ServletContext</code> class and can perform shared business logic
by invoking methods on common non-servlet classes.
"
      end

      operation 144770 "getServlets"
	public return_type class_ref 138242 // Enumeration
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Servlet> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@deprecated	As of Java Servlet API 2.0, with no replacement.

<p>This method was originally defined to return an
<code>Enumeration</code> of all the servlets known to this servlet
context.
In this version, this method always returns an empty enumeration and
remains only to preserve binary compatibility. This method
will be permanently removed in a future version of the Java
Servlet API.
"
      end

      operation 144898 "getServletNames"
	public return_type class_ref 138242 // Enumeration
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@deprecated	As of Java Servlet API 2.1, with no replacement.

<p>This method was originally defined to return an 
<code>Enumeration</code>
of all the servlet names known to this context. In this version,
this method always returns an empty <code>Enumeration</code> and 
remains only to preserve binary compatibility. This method will 
be permanently removed in a future version of the Java Servlet API.
"
      end

      operation 145026 "log"
	public explicit_return_type "void"
	nparams 1
	  param inout name "msg" type class_ref 137218 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
Writes the specified message to a servlet log file, usually
an event log. The name and type of the servlet log file is 
specific to the servlet container.

@param msg 	a <code>String</code> specifying the 
			message to be written to the log file
"
      end

      operation 145154 "log"
	public explicit_return_type "void"
	nparams 2
	  param inout name "exception" type class_ref 138370 // Exception
	  param inout name "msg" type class_ref 137218 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@deprecated	As of Java Servlet API 2.1, use
			{@link #log(String message, Throwable throwable)} 
			instead.

<p>This method was originally defined to write an 
exception's stack trace and an explanatory error message
to the servlet log file.
"
      end

      operation 145282 "log"
	public explicit_return_type "void"
	nparams 2
	  param inout name "message" type class_ref 137218 // String
	  param inout name "throwable" type class_ref 138498 // Throwable
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an explanatory message and a stack trace
for a given <code>Throwable</code> exception
to the servlet log file. The name and type of the servlet log 
file is specific to the servlet container, usually an event log.

@param message 		a <code>String</code> that 
				describes the error or exception

@param throwable 	the <code>Throwable</code> error 
				or exception
"
      end

      operation 145410 "getRealPath"
	public return_type class_ref 137218 // String
	nparams 1
	  param inout name "path" type class_ref 137218 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the <i>real</i> path corresponding to the given
<i>virtual</i> path.

<p>For example, if <tt>path</tt> is equal to <tt>/index.html</tt>,
this method will return the absolute file path on the server's
filesystem to which a request of the form
<tt>http://&lt;host&gt;:&lt;port&gt;/&lt;contextPath&gt;/index.html</tt>
would be mapped, where <tt>&lt;contextPath&gt;</tt> corresponds to the
context path of this ServletContext.

<p>The real path returned will be in a form
appropriate to the computer and operating system on
which the servlet container is running, including the
proper path separators.

<p>Resources inside the <tt>/META-INF/resources</tt>
directories of JAR files bundled in the application's
<tt>/WEB-INF/lib</tt> directory must be considered only if the
container has unpacked them from their containing JAR file, in
which case the path to the unpacked location must be returned.

<p>This method returns <code>null</code> if the servlet container
is unable to translate the given <i>virtual</i> path to a
<i>real</i> path.

@param path the <i>virtual</i> path to be translated to a
<i>real</i> path

@return the <i>real</i> path, or <tt>null</tt> if the
translation cannot be performed
"
      end

      operation 145538 "getServerInfo"
	public return_type class_ref 137218 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name and version of the servlet container on which
the servlet is running. 

<p>The form of the returned string is 
<i>servername</i>/<i>versionnumber</i>.
For example, the JavaServer Web Development Kit may return the string
<code>JavaServer Web Dev Kit/1.0</code>.

<p>The servlet container may return other optional information 
after the primary string in parentheses, for example,
<code>JavaServer Web Dev Kit/1.0 (JDK 1.1.6; Windows NT 4.0 x86)</code>.


@return 		a <code>String</code> containing at least the 
			servlet container name and version number
"
      end

      operation 145666 "getInitParameter"
	public return_type class_ref 137218 // String
	nparams 1
	  param inout name "name" type class_ref 137218 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>String</code> containing the value of the named
context-wide initialization parameter, or <code>null</code> if the 
parameter does not exist.

<p>This method can make available configuration information useful
to an entire web application.  For example, it can provide a 
webmaster's email address or the name of a system that holds 
critical data.

@param	name	a <code>String</code> containing the name of the
                 parameter whose value is requested

@return 		a <code>String</code> containing at least the 
			servlet container name and version number

@see ServletConfig#getInitParameter
"
      end

      operation 145794 "getInitParameterNames"
	public return_type class_ref 138242 // Enumeration
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the names of the context's initialization parameters as an
<code>Enumeration</code> of <code>String</code> objects, or an
empty <code>Enumeration</code> if the context has no initialization
parameters.

@return 		an <code>Enumeration</code> of <code>String</code> 
                 objects containing the names of the context's
                 initialization parameters

@see ServletConfig#getInitParameter
"
      end

      operation 145922 "setInitParameter"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "name" type class_ref 137218 // String
	  param inout name "value" type class_ref 137218 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the context initialization parameter with the given name and
value on this ServletContext.

@param name the name of the context initialization parameter to set
@param value the value of the context initialization parameter to set

@return true if the context initialization parameter with the given
name and value was set successfully on this ServletContext, and false
if it was not set because this ServletContext already contains a
context initialization parameter with a matching name

@throws IllegalStateException if this ServletContext has already
been initialized

@throws UnsupportedOperationException if this ServletContext was
passed to the {@link ServletContextListener#contextInitialized} method
of a {@link ServletContextListener} that was neither declared in
<code>web.xml</code> or <code>web-fragment.xml</code>, nor annotated
with {@link javax.servlet.annotation.WebListener}

@since Servlet 3.0
"
      end

      operation 146050 "getAttribute"
	public return_type class_ref 138626 // Object
	nparams 1
	  param inout name "name" type class_ref 137218 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the servlet container attribute with the given name, 
or <code>null</code> if there is no attribute by that name.

<p>An attribute allows a servlet container to give the
servlet additional information not
already provided by this interface. See your
server documentation for information about its attributes.
A list of supported attributes can be retrieved using
<code>getAttributeNames</code>.

<p>The attribute is returned as a <code>java.lang.Object</code>
or some subclass.

<p>Attribute names should follow the same convention as package
names. The Java Servlet API specification reserves names
matching <code>java.*</code>, <code>javax.*</code>,
and <code>sun.*</code>.

@param name 	a <code>String</code> specifying the name 
			of the attribute

@return 		an <code>Object</code> containing the value 
			of the attribute, or <code>null</code>
			if no attribute exists matching the given
			name

@see 		ServletContext#getAttributeNames
"
      end

      operation 146178 "getAttributeNames"
	public return_type class_ref 138242 // Enumeration
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>Enumeration</code> containing the 
attribute names available within this ServletContext.

<p>Use the {@link #getAttribute} method with an attribute name
to get the value of an attribute.

@return 		an <code>Enumeration</code> of attribute 
			names

@see		#getAttribute
"
      end

      operation 146306 "setAttribute"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 137218 // String
	  param inout name "object" type class_ref 138626 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Binds an object to a given attribute name in this ServletContext. If
the name specified is already used for an attribute, this
method will replace the attribute with the new to the new attribute.
<p>If listeners are configured on the <code>ServletContext</code> the  
container notifies them accordingly.
<p>
If a null value is passed, the effect is the same as calling 
<code>removeAttribute()</code>.

<p>Attribute names should follow the same convention as package
names. The Java Servlet API specification reserves names
matching <code>java.*</code>, <code>javax.*</code>, and
<code>sun.*</code>.

@param name 	a <code>String</code> specifying the name 
			of the attribute

@param object 	an <code>Object</code> representing the
			attribute to be bound
"
      end

      operation 146434 "removeAttribute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 137218 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the attribute with the given name from 
this ServletContext. After removal, subsequent calls to
{@link #getAttribute} to retrieve the attribute's value
will return <code>null</code>.

<p>If listeners are configured on the <code>ServletContext</code> the 
container notifies them accordingly.

@param name	a <code>String</code> specifying the name 
			of the attribute to be removed
"
      end

      operation 146562 "getServletContextName"
	public return_type class_ref 137218 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of this web application corresponding to this
ServletContext as specified in the deployment descriptor for this
web application by the display-name element.

@return The name of the web application or null if no name has been
declared in the deployment descriptor.

@since Servlet 2.3
"
      end

      operation 146690 "addServlet"
	public return_type class_ref 138882 // Dynamic
	nparams 2
	  param inout name "servletName" type class_ref 137218 // String
	  param inout name "className" type class_ref 137218 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the servlet with the given name and class name to this servlet
context.

<p>The registered servlet may be further configured via the returned
{@link ServletRegistration} object.

<p>The specified <tt>className</tt> will be loaded using the 
classloader associated with the application represented by this
ServletContext.

<p>If this ServletContext already contains a preliminary
ServletRegistration for a servlet with the given <tt>servletName</tt>,
it will be completed (by assigning the given <tt>className</tt> to it)
and returned.

<p>This method introspects the class with the given <tt>className</tt>
for the {@link javax.servlet.annotation.ServletSecurity}, 
{@link javax.servlet.annotation.MultipartConfig},
<tt>javax.annotation.security.RunAs</tt>, and
<tt>javax.annotation.security.DeclareRoles</tt> annotations.
In addition, this method supports resource injection if the
class with the given <tt>className</tt> represents a Managed Bean.
See the Java EE platform and JSR 299 specifications for additional
details about Managed Beans and resource injection.

@param servletName the name of the servlet
@param className the fully qualified class name of the servlet

@return a ServletRegistration object that may be used to further
configure the registered servlet, or <tt>null</tt> if this
ServletContext already contains a complete ServletRegistration for
a servlet with the given <tt>servletName</tt> 

@throws IllegalStateException if this ServletContext has already
been initialized

@throws UnsupportedOperationException if this ServletContext was
passed to the {@link ServletContextListener#contextInitialized} method
of a {@link ServletContextListener} that was neither declared in
<code>web.xml</code> or <code>web-fragment.xml</code>, nor annotated
with {@link javax.servlet.annotation.WebListener}

@since Servlet 3.0
"
      end

      operation 146818 "addServlet"
	public return_type class_ref 138882 // Dynamic
	nparams 2
	  param inout name "servletName" type class_ref 137218 // String
	  param inout name "servlet" type class_ref 137986 // Servlet
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers the given servlet instance with this ServletContext
under the given <tt>servletName</tt>.

<p>The registered servlet may be further configured via the returned
{@link ServletRegistration} object.

<p>If this ServletContext already contains a preliminary
ServletRegistration for a servlet with the given <tt>servletName</tt>,
it will be completed (by assigning the class name of the given servlet
instance to it) and returned.

@param servletName the name of the servlet
@param servlet the servlet instance to register

@return a ServletRegistration object that may be used to further
configure the given servlet, or <tt>null</tt> if this
ServletContext already contains a complete ServletRegistration for a
servlet with the given <tt>servletName</tt> or if the same servlet
instance has already been registered with this or another
ServletContext in the same container

@throws IllegalStateException if this ServletContext has already
been initialized

@throws UnsupportedOperationException if this ServletContext was
passed to the {@link ServletContextListener#contextInitialized} method
of a {@link ServletContextListener} that was neither declared in
<code>web.xml</code> or <code>web-fragment.xml</code>, nor annotated
with {@link javax.servlet.annotation.WebListener}

@throws IllegalArgumentException if the given servlet instance 
implements {@link SingleThreadModel}

@since Servlet 3.0
"
      end

      operation 146946 "addServlet"
	public return_type class_ref 138882 // Dynamic
	nparams 2
	  param inout name "servletName" type class_ref 137218 // String
	  param inout name "servletClass" type class_ref 139010 // Class
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? extends Servlet> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the servlet with the given name and class type to this servlet
context.

<p>The registered servlet may be further configured via the returned
{@link ServletRegistration} object.

<p>If this ServletContext already contains a preliminary
ServletRegistration for a servlet with the given <tt>servletName</tt>,
it will be completed (by assigning the name of the given
<tt>servletClass</tt> to it) and returned.

<p>This method introspects the given <tt>servletClass</tt> for
the {@link javax.servlet.annotation.ServletSecurity}, 
{@link javax.servlet.annotation.MultipartConfig},
<tt>javax.annotation.security.RunAs</tt>, and
<tt>javax.annotation.security.DeclareRoles</tt> annotations.
In addition, this method supports resource injection if the
given <tt>servletClass</tt> represents a Managed Bean.
See the Java EE platform and JSR 299 specifications for additional
details about Managed Beans and resource injection.

@param servletName the name of the servlet
@param servletClass the class object from which the servlet will be
instantiated

@return a ServletRegistration object that may be used to further
configure the registered servlet, or <tt>null</tt> if this
ServletContext already contains a complete ServletRegistration for
the given <tt>servletName</tt> 

@throws IllegalStateException if this ServletContext has already
been initialized

@throws UnsupportedOperationException if this ServletContext was
passed to the {@link ServletContextListener#contextInitialized} method
of a {@link ServletContextListener} that was neither declared in
<code>web.xml</code> or <code>web-fragment.xml</code>, nor annotated
with {@link javax.servlet.annotation.WebListener}

@since Servlet 3.0
"
      end

      operation 147074 "createServlet"
	public explicit_return_type "T"
	nparams 1
	  param inout name "clazz" type class_ref 139010 // Class
	nexceptions 1
	  exception class_ref 138114 // ServletException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Servlet> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Instantiates the given Servlet class.

<p>The returned Servlet instance may be further customized before it
is registered with this ServletContext via a call to 
{@link #addServlet(String,Servlet)}.

<p>The given Servlet class must define a zero argument constructor,
which is used to instantiate it.

<p>This method introspects the given <tt>clazz</tt> for
the following annotations:
{@link javax.servlet.annotation.ServletSecurity}, 
{@link javax.servlet.annotation.MultipartConfig},
<tt>javax.annotation.security.RunAs</tt>, and
<tt>javax.annotation.security.DeclareRoles</tt>.
In addition, this method supports resource injection if the
given <tt>clazz</tt> represents a Managed Bean.
See the Java EE platform and JSR 299 specifications for additional
details about Managed Beans and resource injection.

@param clazz the Servlet class to instantiate

@return the new Servlet instance

@throws ServletException if the given <tt>clazz</tt> fails to be
instantiated

@throws UnsupportedOperationException if this ServletContext was
passed to the {@link ServletContextListener#contextInitialized} method
of a {@link ServletContextListener} that was neither declared in
<code>web.xml</code> or <code>web-fragment.xml</code>, nor annotated
with {@link javax.servlet.annotation.WebListener}

@since Servlet 3.0
"
      end

      operation 147202 "getServletRegistration"
	public return_type class_ref 138754 // ServletRegistration
	nparams 1
	  param inout name "servletName" type class_ref 137218 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the ServletRegistration corresponding to the servlet with the
given <tt>servletName</tt>.

@return the (complete or preliminary) ServletRegistration for the
servlet with the given <tt>servletName</tt>, or null if no
ServletRegistration exists under that name

@throws UnsupportedOperationException if this ServletContext was
passed to the {@link ServletContextListener#contextInitialized} method
of a {@link ServletContextListener} that was neither declared in
<code>web.xml</code> or <code>web-fragment.xml</code>, nor annotated
with {@link javax.servlet.annotation.WebListener}

@since Servlet 3.0
"
      end

      operation 147330 "getServletRegistrations"
	public return_type class_ref 139138 // Map
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String, ? extends ServletRegistration> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a (possibly empty) Map of the ServletRegistration
objects (keyed by servlet name) corresponding to all servlets
registered with this ServletContext.

<p>The returned Map includes the ServletRegistration objects
corresponding to all declared and annotated servlets, as well as the
ServletRegistration objects corresponding to all servlets that have
been added via one of the <tt>addServlet</tt> methods.

<p>Any changes to the returned Map must not affect this
ServletContext.

@return Map of the (complete and preliminary) ServletRegistration
objects corresponding to all servlets currently registered with this
ServletContext

@throws UnsupportedOperationException if this ServletContext was
passed to the {@link ServletContextListener#contextInitialized} method
of a {@link ServletContextListener} that was neither declared in
<code>web.xml</code> or <code>web-fragment.xml</code>, nor annotated
with {@link javax.servlet.annotation.WebListener}

@since Servlet 3.0
"
      end

      operation 147458 "addFilter"
	public return_type class_ref 139394 // Dynamic
	nparams 2
	  param inout name "filterName" type class_ref 137218 // String
	  param inout name "className" type class_ref 137218 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the filter with the given name and class name to this servlet
context.

<p>The registered filter may be further configured via the returned
{@link FilterRegistration} object.

<p>The specified <tt>className</tt> will be loaded using the 
classloader associated with the application represented by this
ServletContext.

<p>If this ServletContext already contains a preliminary
FilterRegistration for a filter with the given <tt>filterName</tt>,
it will be completed (by assigning the given <tt>className</tt> to it)
and returned.

<p>This method supports resource injection if the class with the
given <tt>className</tt> represents a Managed Bean.
See the Java EE platform and JSR 299 specifications for additional
details about Managed Beans and resource injection.

@param filterName the name of the filter
@param className the fully qualified class name of the filter

@return a FilterRegistration object that may be used to further
configure the registered filter, or <tt>null</tt> if this
ServletContext already contains a complete FilterRegistration for
a filter with the given <tt>filterName</tt> 

@throws IllegalStateException if this ServletContext has already
been initialized

@throws UnsupportedOperationException if this ServletContext was
passed to the {@link ServletContextListener#contextInitialized} method
of a {@link ServletContextListener} that was neither declared in
<code>web.xml</code> or <code>web-fragment.xml</code>, nor annotated
with {@link javax.servlet.annotation.WebListener}

@since Servlet 3.0
"
      end

      operation 147586 "addFilter"
	public return_type class_ref 139394 // Dynamic
	nparams 2
	  param inout name "filterName" type class_ref 137218 // String
	  param inout name "filter" type class_ref 139522 // Filter
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers the given filter instance with this ServletContext
under the given <tt>filterName</tt>.

<p>The registered filter may be further configured via the returned
{@link FilterRegistration} object.

<p>If this ServletContext already contains a preliminary
FilterRegistration for a filter with the given <tt>filterName</tt>,
it will be completed (by assigning the class name of the given filter
instance to it) and returned.

@param filterName the name of the filter
@param filter the filter instance to register

@return a FilterRegistration object that may be used to further
configure the given filter, or <tt>null</tt> if this
ServletContext already contains a complete FilterRegistration for a
filter with the given <tt>filterName</tt> or if the same filter
instance has already been registered with this or another
ServletContext in the same container

@throws IllegalStateException if this ServletContext has already
been initialized

@throws UnsupportedOperationException if this ServletContext was
passed to the {@link ServletContextListener#contextInitialized} method
of a {@link ServletContextListener} that was neither declared in
<code>web.xml</code> or <code>web-fragment.xml</code>, nor annotated
with {@link javax.servlet.annotation.WebListener}

@since Servlet 3.0
"
      end

      operation 147714 "addFilter"
	public return_type class_ref 139394 // Dynamic
	nparams 2
	  param inout name "filterName" type class_ref 137218 // String
	  param inout name "filterClass" type class_ref 139010 // Class
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? extends Filter> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the filter with the given name and class type to this servlet
context.

<p>The registered filter may be further configured via the returned
{@link FilterRegistration} object.

<p>If this ServletContext already contains a preliminary
FilterRegistration for a filter with the given <tt>filterName</tt>,
it will be completed (by assigning the name of the given
<tt>filterClass</tt> to it) and returned.

<p>This method supports resource injection if the given
<tt>filterClass</tt> represents a Managed Bean.
See the Java EE platform and JSR 299 specifications for additional
details about Managed Beans and resource injection.

@param filterName the name of the filter
@param filterClass the class object from which the filter will be
instantiated

@return a FilterRegistration object that may be used to further
configure the registered filter, or <tt>null</tt> if this
ServletContext already contains a complete FilterRegistration for a
filter with the given <tt>filterName</tt> 

@throws IllegalStateException if this ServletContext has already
been initialized

@throws UnsupportedOperationException if this ServletContext was
passed to the {@link ServletContextListener#contextInitialized} method
of a {@link ServletContextListener} that was neither declared in
<code>web.xml</code> or <code>web-fragment.xml</code>, nor annotated
with {@link javax.servlet.annotation.WebListener}

@since Servlet 3.0
"
      end

      operation 147842 "createFilter"
	public explicit_return_type "T"
	nparams 1
	  param inout name "clazz" type class_ref 139010 // Class
	nexceptions 1
	  exception class_ref 138114 // ServletException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Filter> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Instantiates the given Filter class.

<p>The returned Filter instance may be further customized before it
is registered with this ServletContext via a call to 
{@link #addFilter(String,Filter)}.

<p>The given Filter class must define a zero argument constructor,
which is used to instantiate it.

<p>This method supports resource injection if the given
<tt>clazz</tt> represents a Managed Bean.
See the Java EE platform and JSR 299 specifications for additional
details about Managed Beans and resource injection.

@param clazz the Filter class to instantiate

@return the new Filter instance

@throws ServletException if the given <tt>clazz</tt> fails to be
instantiated

@throws UnsupportedOperationException if this ServletContext was
passed to the {@link ServletContextListener#contextInitialized} method
of a {@link ServletContextListener} that was neither declared in
<code>web.xml</code> or <code>web-fragment.xml</code>, nor annotated
with {@link javax.servlet.annotation.WebListener}

@since Servlet 3.0
"
      end

      operation 147970 "getFilterRegistration"
	public return_type class_ref 139266 // FilterRegistration
	nparams 1
	  param inout name "filterName" type class_ref 137218 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the FilterRegistration corresponding to the filter with the
given <tt>filterName</tt>.

@return the (complete or preliminary) FilterRegistration for the
filter with the given <tt>filterName</tt>, or null if no
FilterRegistration exists under that name

@throws UnsupportedOperationException if this ServletContext was
passed to the {@link ServletContextListener#contextInitialized} method
of a {@link ServletContextListener} that was neither declared in
<code>web.xml</code> or <code>web-fragment.xml</code>, nor annotated
with {@link javax.servlet.annotation.WebListener}

@since Servlet 3.0
"
      end

      operation 148098 "getFilterRegistrations"
	public return_type class_ref 139138 // Map
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String, ? extends FilterRegistration> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a (possibly empty) Map of the FilterRegistration
objects (keyed by filter name) corresponding to all filters
registered with this ServletContext.

<p>The returned Map includes the FilterRegistration objects
corresponding to all declared and annotated filters, as well as the
FilterRegistration objects corresponding to all filters that have
been added via one of the <tt>addFilter</tt> methods.

<p>Any changes to the returned Map must not affect this
ServletContext.

@return Map of the (complete and preliminary) FilterRegistration
objects corresponding to all filters currently registered with this
ServletContext

@throws UnsupportedOperationException if this ServletContext was
passed to the {@link ServletContextListener#contextInitialized} method
of a {@link ServletContextListener} that was neither declared in
<code>web.xml</code> or <code>web-fragment.xml</code>, nor annotated
with {@link javax.servlet.annotation.WebListener}

@since Servlet 3.0
"
      end

      operation 148226 "getSessionCookieConfig"
	public return_type class_ref 139650 // SessionCookieConfig
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@link SessionCookieConfig} object through which various
properties of the session tracking cookies created on behalf of this
<tt>ServletContext</tt> may be configured.

<p>Repeated invocations of this method will return the same
<tt>SessionCookieConfig</tt> instance.

@return the <tt>SessionCookieConfig</tt> object through which
various properties of the session tracking cookies created on
behalf of this <tt>ServletContext</tt> may be configured

@throws UnsupportedOperationException if this ServletContext was
passed to the {@link ServletContextListener#contextInitialized} method
of a {@link ServletContextListener} that was neither declared in
<code>web.xml</code> or <code>web-fragment.xml</code>, nor annotated
with {@link javax.servlet.annotation.WebListener}

@since Servlet 3.0
"
      end

      operation 148354 "setSessionTrackingModes"
	public explicit_return_type "void"
	nparams 1
	  param inout name "sessionTrackingModes" type class_ref 137346 // Set
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<SessionTrackingMode> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the session tracking modes that are to become effective for this
<tt>ServletContext</tt>.

<p>The given <tt>sessionTrackingModes</tt> replaces any
session tracking modes set by a previous invocation of this
method on this <tt>ServletContext</tt>.

@param sessionTrackingModes the set of session tracking modes to
become effective for this <tt>ServletContext</tt>

@throws IllegalStateException if this ServletContext has already
been initialized

@throws UnsupportedOperationException if this ServletContext was
passed to the {@link ServletContextListener#contextInitialized} method
of a {@link ServletContextListener} that was neither declared in
<code>web.xml</code> or <code>web-fragment.xml</code>, nor annotated
with {@link javax.servlet.annotation.WebListener}

@throws IllegalArgumentException if <tt>sessionTrackingModes</tt>
specifies a combination of <tt>SessionTrackingMode.SSL</tt> with a
session tracking mode other than <tt>SessionTrackingMode.SSL</tt>,
or if <tt>sessionTrackingModes</tt> specifies a session tracking mode
that is not supported by the servlet container

@since Servlet 3.0
"
      end

      operation 148482 "getDefaultSessionTrackingModes"
	public return_type class_ref 137346 // Set
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<SessionTrackingMode> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the session tracking modes that are supported by default for this
<tt>ServletContext</tt>.

@return set of the session tracking modes supported by default for
this <tt>ServletContext</tt>

@throws UnsupportedOperationException if this ServletContext was
passed to the {@link ServletContextListener#contextInitialized} method
of a {@link ServletContextListener} that was neither declared in
<code>web.xml</code> or <code>web-fragment.xml</code>, nor annotated
with {@link javax.servlet.annotation.WebListener}

@since Servlet 3.0
"
      end

      operation 148610 "getEffectiveSessionTrackingModes"
	public return_type class_ref 137346 // Set
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<SessionTrackingMode> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the session tracking modes that are in effect for this
<tt>ServletContext</tt>.

<p>The session tracking modes in effect are those provided to
{@link #setSessionTrackingModes setSessionTrackingModes}.

<p>By default, the session tracking modes returned by
{@link #getDefaultSessionTrackingModes getDefaultSessionTrackingModes}
are in effect.

@return set of the session tracking modes in effect for this
<tt>ServletContext</tt>

@throws UnsupportedOperationException if this ServletContext was
passed to the {@link ServletContextListener#contextInitialized} method
of a {@link ServletContextListener} that was neither declared in
<code>web.xml</code> or <code>web-fragment.xml</code>, nor annotated
with {@link javax.servlet.annotation.WebListener}

@since Servlet 3.0
"
      end

      operation 148738 "addListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "className" type class_ref 137218 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the listener with the given class name to this ServletContext.

<p>The class with the given name will be loaded using the
classloader associated with the application represented by this
ServletContext, and must implement one or more of the following
interfaces:
<ul>
<li>{@link ServletContextAttributeListener}</tt>
<li>{@link ServletRequestListener}</tt>
<li>{@link ServletRequestAttributeListener}</tt>
<li>{@link javax.servlet.http.HttpSessionListener}</tt>
<li>{@link javax.servlet.http.HttpSessionAttributeListener}</tt>
</ul>

<p>If this ServletContext was passed to 
{@link ServletContainerInitializer#onStartup}, then the class with
the given name may also implement {@link ServletContextListener},
in addition to the interfaces listed above.

<p>As part of this method call, the container must load the class
with the specified class name to ensure that it implements one of 
the required interfaces.

<p>If the class with the given name implements a listener interface
whose invocation order corresponds to the declaration order (i.e.,
if it implements {@link ServletRequestListener},
{@link ServletContextListener}, or
{@link javax.servlet.http.HttpSessionListener}),
then the new listener will be added to the end of the ordered list of
listeners of that interface.

<p>This method supports resource injection if the class with the
given <tt>className</tt> represents a Managed Bean.
See the Java EE platform and JSR 299 specifications for additional
details about Managed Beans and resource injection.

@param className the fully qualified class name of the listener

@throws IllegalArgumentException if the class with the given name
does not implement any of the above interfaces, or if it implements
{@link ServletContextListener} and this ServletContext was not
passed to {@link ServletContainerInitializer#onStartup}

@throws IllegalStateException if this ServletContext has already
been initialized

@throws UnsupportedOperationException if this ServletContext was
passed to the {@link ServletContextListener#contextInitialized} method
of a {@link ServletContextListener} that was neither declared in
<code>web.xml</code> or <code>web-fragment.xml</code>, nor annotated
with {@link javax.servlet.annotation.WebListener}

@since Servlet 3.0
"
      end

      operation 148866 "addListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "t" explicit_type "T"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends EventListener> ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the given listener to this ServletContext.

<p>The given listener must be an instance of one or more of the
following interfaces:
<ul>
<li>{@link ServletContextAttributeListener}</tt>
<li>{@link ServletRequestListener}</tt>
<li>{@link ServletRequestAttributeListener}</tt>
<li>{@link javax.servlet.http.HttpSessionListener}</tt>
<li>{@link javax.servlet.http.HttpSessionAttributeListener}</tt>
</ul>

<p>If this ServletContext was passed to 
{@link ServletContainerInitializer#onStartup}, then the given
listener may also be an instance of {@link ServletContextListener},
in addition to the interfaces listed above.

<p>If the given listener is an instance of a listener interface whose
invocation order corresponds to the declaration order (i.e., if it
is an instance of {@link ServletRequestListener},
{@link ServletContextListener}, or
{@link javax.servlet.http.HttpSessionListener}),
then the listener will be added to the end of the ordered list of
listeners of that interface.

@param t the listener to be added

@throws IllegalArgumentException if the given listener is not
an instance of any of the above interfaces, or if it is an instance
of {@link ServletContextListener} and this ServletContext was not
passed to {@link ServletContainerInitializer#onStartup}

@throws IllegalStateException if this ServletContext has already
been initialized

@throws UnsupportedOperationException if this ServletContext was
passed to the {@link ServletContextListener#contextInitialized} method
of a {@link ServletContextListener} that was neither declared in
<code>web.xml</code> or <code>web-fragment.xml</code>, nor annotated
with {@link javax.servlet.annotation.WebListener}

@since Servlet 3.0
"
      end

      operation 148994 "addListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listenerClass" type class_ref 139010 // Class
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends EventListener> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a listener of the given class type to this ServletContext.

<p>The given <tt>listenerClass</tt> must implement one or more of the
following interfaces:
<ul>
<li>{@link ServletContextAttributeListener}</tt>
<li>{@link ServletRequestListener}</tt>
<li>{@link ServletRequestAttributeListener}</tt>
<li>{@link javax.servlet.http.HttpSessionListener}</tt>
<li>{@link javax.servlet.http.HttpSessionAttributeListener}</tt>
</ul>

<p>If this ServletContext was passed to 
{@link ServletContainerInitializer#onStartup}, then the given
<tt>listenerClass</tt> may also implement
{@link ServletContextListener}, in addition to the interfaces listed
above.

<p>If the given <tt>listenerClass</tt<> implements a listener
interface whose invocation order corresponds to the declaration order
(i.e., if it implements {@link ServletRequestListener},
{@link ServletContextListener}, or
{@link javax.servlet.http.HttpSessionListener}),
then the new listener will be added to the end of the ordered list
of listeners of that interface.

<p>This method supports resource injection if the given
<tt>listenerClass</tt> represents a Managed Bean.
See the Java EE platform and JSR 299 specifications for additional
details about Managed Beans and resource injection.

@param listenerClass the listener class to be instantiated

@throws IllegalArgumentException if the given <tt>listenerClass</tt>
does not implement any of the above interfaces, or if it implements
{@link ServletContextListener} and this ServletContext was not passed
to {@link ServletContainerInitializer#onStartup}

@throws IllegalStateException if this ServletContext has already
been initialized

@throws UnsupportedOperationException if this ServletContext was
passed to the {@link ServletContextListener#contextInitialized} method
of a {@link ServletContextListener} that was neither declared in
<code>web.xml</code> or <code>web-fragment.xml</code>, nor annotated
with {@link javax.servlet.annotation.WebListener}

@since Servlet 3.0
"
      end

      operation 149122 "createListener"
	public explicit_return_type "T"
	nparams 1
	  param inout name "clazz" type class_ref 139010 // Class
	nexceptions 1
	  exception class_ref 138114 // ServletException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends EventListener> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Instantiates the given EventListener class.

<p>The specified EventListener class must implement at least one of
the <code>{@link ServletContextListener}</code>,
<code>{@link ServletContextAttributeListener}</code>,
<code>{@link ServletRequestListener}</code>,
<code>{@link ServletRequestAttributeListener}</code>,
<code>{@link javax.servlet.http.HttpSessionListener}</code>, or
<code>{@link javax.servlet.http.HttpSessionAttributeListener}</code>
interfaces.

<p>The returned EventListener instance may be further customized
before it is registered with this ServletContext via a call to
{@link #addListener(EventListener)}.

<p>The given EventListener class must define a zero argument
constructor, which is used to instantiate it.

<p>This method supports resource injection if the given
<tt>clazz</tt> represents a Managed Bean.
See the Java EE platform and JSR 299 specifications for additional
details about Managed Beans and resource injection.

@param clazz the EventListener class to instantiate

@return the new EventListener instance

@throws ServletException if the given <tt>clazz</tt> fails to be
instantiated

@throws UnsupportedOperationException if this ServletContext was
passed to the {@link ServletContextListener#contextInitialized} method
of a {@link ServletContextListener} that was neither declared in
<code>web.xml</code> or <code>web-fragment.xml</code>, nor annotated
with {@link javax.servlet.annotation.WebListener}

@throws IllegalArgumentException if the specified EventListener class
does not implement any of the
<code>{@link ServletContextListener}</code>,
<code>{@link ServletContextAttributeListener}</code>,
<code>{@link ServletRequestListener}</code>,
<code>{@link ServletRequestAttributeListener}</code>,
<code>{@link javax.servlet.http.HttpSessionListener}</code>, or
<code>{@link javax.servlet.http.HttpSessionAttributeListener}</code>
interfaces.

@since Servlet 3.0
"
      end

      operation 149250 "getJspConfigDescriptor"
	public return_type class_ref 139906 // JspConfigDescriptor
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the <code>&lt;jsp-config&gt;</code> related configuration
that was aggregated from the <code>web.xml</code> and
<code>web-fragment.xml</code> descriptor files of the web application
represented by this ServletContext.

@return the <code>&lt;jsp-config&gt;</code> related configuration
that was aggregated from the <code>web.xml</code> and
<code>web-fragment.xml</code> descriptor files of the web application
represented by this ServletContext, or null if no such configuration
exists

@throws UnsupportedOperationException if this ServletContext was
passed to the {@link ServletContextListener#contextInitialized} method
of a {@link ServletContextListener} that was neither declared in
<code>web.xml</code> or <code>web-fragment.xml</code>, nor annotated
with {@link javax.servlet.annotation.WebListener}

@see javax.servlet.descriptor.JspConfigDescriptor

@since Servlet 3.0
"
      end

      operation 149378 "getClassLoader"
	public return_type class_ref 140034 // ClassLoader
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the class loader of the web application represented by this
ServletContext.

<p>If a security manager exists, and the caller's class loader
is not the same as, or an ancestor of the requested class loader,
then the security manager's <code>checkPermission</code> method is
called with a <code>RuntimePermission(\"getClassLoader\")</code>
permission to check whether access to the requested class loader
should be granted.

@return the class loader of the web application represented by this
ServletContext

@throws UnsupportedOperationException if this ServletContext was
passed to the {@link ServletContextListener#contextInitialized} method
of a {@link ServletContextListener} that was neither declared in
<code>web.xml</code> or <code>web-fragment.xml</code>, nor annotated
with {@link javax.servlet.annotation.WebListener}

@throws SecurityException if a security manager denies access to 
the requested class loader

@since Servlet 3.0
"
      end

      operation 149506 "declareRoles"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "String...roleNames"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Declares role names that are tested using <code>isUserInRole</code>.

<p>Roles that are implicitly declared as a result of their use within
the {@link ServletRegistration.Dynamic#setServletSecurity
setServletSecurity} or {@link ServletRegistration.Dynamic#setRunAsRole
setRunAsRole} methods of the {@link ServletRegistration} interface need
not be declared.

@param roleNames the role names being declared

@throws UnsupportedOperationException if this ServletContext was
passed to the {@link ServletContextListener#contextInitialized} method
of a {@link ServletContextListener} that was neither declared in
<code>web.xml</code> or <code>web-fragment.xml</code>, nor annotated
with {@link javax.servlet.annotation.WebListener}

@throws IllegalArgumentException if any of the argument roleNames is
null or the empty string

@throws IllegalStateException if the ServletContext has already
been initialized

@since Servlet 3.0
"
      end
    end

    class 137858 "RequestDispatcher"
      visibility package stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 137986 "Servlet"
      visibility package stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 138114 "ServletException"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 138754 "ServletRegistration"
      visibility package stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      class 138882 "Dynamic"
	visibility package stereotype "interface"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end
    end

    class 139266 "FilterRegistration"
      visibility package stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      class 139394 "Dynamic"
	visibility package stereotype "interface"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end
    end

    class 139522 "Filter"
      visibility package stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 139650 "SessionCookieConfig"
      visibility package stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 139778 "SessionTrackingMode"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end
  end

  package_ref 136578 // descriptor

  package_ref 136706 // http
end
